1612441676.474195 client started (198465): version 3.0a, socket /tmp//tmux-1000/default, protocol 8
1612441676.474207 on Linux 5.4.0-42-generic #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020; libevent 2.1.11-stable (poll)
1612441676.474215 socket is /tmp//tmux-1000/default
1612441676.474223 trying connect
1612441676.474549 add peer 0x555caa5f9e00: 6 ((nil))
1612441676.474580 sending message 100 to peer 0x555caa5f9e00 (4 bytes)
1612441676.474583 sending message 101 to peer 0x555caa5f9e00 (7 bytes)
1612441676.474585 sending message 102 to peer 0x555caa5f9e00 (11 bytes)
1612441676.474588 sending message 108 to peer 0x555caa5f9e00 (23 bytes)
1612441676.474590 sending message 104 to peer 0x555caa5f9e00 (0 bytes)
1612441676.474593 sending message 107 to peer 0x555caa5f9e00 (4 bytes)
1612441676.474595 sending message 105 to peer 0x555caa5f9e00 (54 bytes)
1612441676.474597 sending message 105 to peer 0x555caa5f9e00 (15 bytes)
1612441676.474599 sending message 105 to peer 0x555caa5f9e00 (22 bytes)
1612441676.474602 sending message 105 to peer 0x555caa5f9e00 (18 bytes)
1612441676.474604 sending message 105 to peer 0x555caa5f9e00 (16 bytes)
1612441676.474608 sending message 105 to peer 0x555caa5f9e00 (21 bytes)
1612441676.474612 sending message 105 to peer 0x555caa5f9e00 (8 bytes)
1612441676.474615 sending message 105 to peer 0x555caa5f9e00 (15 bytes)
1612441676.474618 sending message 105 to peer 0x555caa5f9e00 (32 bytes)
1612441676.474622 sending message 105 to peer 0x555caa5f9e00 (1506 bytes)
1612441676.474629 sending message 105 to peer 0x555caa5f9e00 (15 bytes)
1612441676.474633 sending message 105 to peer 0x555caa5f9e00 (30 bytes)
1612441676.474636 sending message 105 to peer 0x555caa5f9e00 (11 bytes)
1612441676.474639 sending message 105 to peer 0x555caa5f9e00 (104 bytes)
1612441676.474642 sending message 105 to peer 0x555caa5f9e00 (28 bytes)
1612441676.474644 sending message 105 to peer 0x555caa5f9e00 (27 bytes)
1612441676.474646 sending message 105 to peer 0x555caa5f9e00 (19 bytes)
1612441676.474649 sending message 105 to peer 0x555caa5f9e00 (8 bytes)
1612441676.474651 sending message 105 to peer 0x555caa5f9e00 (34 bytes)
1612441676.474653 sending message 105 to peer 0x555caa5f9e00 (52 bytes)
1612441676.474655 sending message 105 to peer 0x555caa5f9e00 (19 bytes)
1612441676.474658 sending message 105 to peer 0x555caa5f9e00 (12 bytes)
1612441676.474660 sending message 105 to peer 0x555caa5f9e00 (38 bytes)
1612441676.474662 sending message 105 to peer 0x555caa5f9e00 (13 bytes)
1612441676.474664 sending message 105 to peer 0x555caa5f9e00 (12 bytes)
1612441676.474666 sending message 105 to peer 0x555caa5f9e00 (65 bytes)
1612441676.474669 sending message 105 to peer 0x555caa5f9e00 (31 bytes)
1612441676.474671 sending message 105 to peer 0x555caa5f9e00 (23 bytes)
1612441676.474673 sending message 105 to peer 0x555caa5f9e00 (20 bytes)
1612441676.474676 sending message 105 to peer 0x555caa5f9e00 (21 bytes)
1612441676.474679 sending message 105 to peer 0x555caa5f9e00 (28 bytes)
1612441676.474682 sending message 105 to peer 0x555caa5f9e00 (16 bytes)
1612441676.474686 sending message 106 to peer 0x555caa5f9e00 (0 bytes)
1612441676.474689 sending message 200 to peer 0x555caa5f9e00 (4 bytes)
1612441676.474693 client loop enter
1612441676.474875 peer 0x555caa5f9e00 message 211
1612441676.474881 client_write: sessions should be nested with care, unset $TMUX to force\n
1612441676.474986 peer 0x555caa5f9e00 message 203
1612441676.474990 client loop exit
